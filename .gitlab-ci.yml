include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/SAST-IaC.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  # Commented out as we are using our own tool for license scanning
  # - template: Jobs/License-Scanning.gitlab-ci.yml
  - component: gitlab.com/infor-cloud/gitlab-components/software-bill-of-materials/generate-sbom-go@1.0.0
    inputs:
      stage: test
      module_path: .
      assert_licenses: true
      # files: false
      # json: true
      # licenses: true
      main: cmd/tharsis
      # no_serial: false
      # output_version: 1.5
      # packages: false
      # paths: false
      # serial: ""
      std: true
      # verbose: false
      # supplier_name: "Infor LLC"
      # author_name: "Infor LLC"
      go_arch: amd64
      go_os: linux
      cgo_enabled: "0"
      # go_flags: ""

stages:
  - test
  - build
  - upload
  - release

# Only start pipelines on Merge Requests, the default branch, and tags
workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_MERGE_REQUEST_IID
      when: always
    - if: $CI_COMMIT_TAG
      when: always
    - when: never

variables:
  # Go project settings
  GO_VERSION: "1.20"
  CGO_ENABLED: "0"
  GOPATH_RELATIVE_PATH: .go
  GOPATH: "$CI_PROJECT_DIR/$GOPATH_RELATIVE_PATH"
  GOCACHE: "$GOPATH/cache"
  SAST_EXCLUDED_PATHS: "$GOPATH_RELATIVE_PATH, docker-compose"
  SECRET_DETECTION_EXCLUDED_PATHS: "$GOPATH_RELATIVE_PATH"
  PROJECT_NAME: "tharsis-cli"
  UNVERSIONED_PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PROJECT_NAME}"

default:
  tags:
    - oss
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - stuck_or_timeout_failure
      - runner_system_failure
  interruptible: true

.cache-template: &cache-template
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - ".go/pkg/mod"
    - ".go/cache"

#################################
##            RULES            ##
#################################

.on_merge_request_and_merged_events:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event"'

.on_tag_events:
  rules:
    - if: "$CI_COMMIT_TAG"

.on_default_branch_and_merge_train_with_golang_changes:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
      changes:
        - "**/go.mod"
        - "**/go.sum"
        - go.mod
        - go.sum

#################################
##            BUILD            ##
#################################

tests:
  image: golang:${GO_VERSION}-alpine
  stage: test
  before_script:
    - export PATH=$PATH:$GOPATH/bin
    - apk add git bash openssh ca-certificates
    - go install github.com/jstemmer/go-junit-report@latest
    - go install github.com/boumenot/gocover-cobertura@latest
  script:
    - |
      go mod download
      go vet $(go list ./... | grep -v /vendor/)
      go test -covermode=atomic -coverpkg  gitlab.com/infor-cloud/martian-cloud/tharsis/tharsis-cli/... -v -coverprofile .coverage ./... 2>&1 | tee .test-results
      go tool cover -func .coverage | tail
      go-junit-report -set-exit-code < .test-results > .xunit-results.xml
      gocover-cobertura < .coverage > coverage.xml
  artifacts:
    when: always
    reports:
      junit: .xunit-results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/\(statements\)\s*(\d+(?:\.\d+)?%)/'
  cache:
    <<: *cache-template

linting:
  image: golang:${GO_VERSION}-alpine
  stage: test
  before_script:
    - export PATH=$PATH:$GOPATH/bin
    - apk add git bash openssh ca-certificates
    - go install github.com/mgechev/revive@$GO_LINTER_VERSION
  script:
    - go mod download
    - revive -set_exit_status $(go list ./... | grep -v /vendor/)
  cache:
    <<: *cache-template

Build:
  image: golang:${GO_VERSION}-alpine
  stage: build
  before_script:
    - apk add git openssh make
  script:
    - make build
  artifacts:
    when: always
  cache:
    <<: *cache-template

Build Tharsis CLI Release:
  image: golang:${GO_VERSION}-alpine
  stage: build
  before_script:
    - apk add tar gzip curl git openssh make
  script:
    - VERSION=$CI_COMMIT_TAG make release
  artifacts:
    paths:
      - bin/
  cache:
    <<: *cache-template
  rules:
    - !reference [.on_tag_events, rules]

Upload Tharsis CLI:
  stage: upload
  image: curlimages/curl:latest
  script:
    - |
      set -x
      BINARIES="./bin/*"
      for BINARY in $BINARIES
      do
        BINARY_NAME=$(basename $BINARY)
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file $BINARY "${UNVERSIONED_PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${BINARY_NAME}"
      done
  rules:
    - !reference [.on_tag_events, rules]

Release Tharsis CLI:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - !reference [.on_tag_events, rules]
  script:
    - |
      set -x
      echo "Tharsis CLI Release"

      # FIXME: Add SBOM report to ASSETS:
      #
      # OUTPUT_FILE="gl-sbom-go-go.DOLLAR(echo DOLLAR[[ inputs.main ]]:DOLLAR[[ inputs.go_os ]]:DOLLAR[[ inputs.go_arch ]]:DOLLAR[[ inputs.cgo_enabled ]] | tr '/ ' '_').cdx.json"
      #
      #  artifacts:
      #    paths:
      #      - "**/gl-sbom-*.cdx.json"
      #    reports:
      #      cyclonedx: "**/gl-sbom-*.cdx.json"
      echo 'These are the SBOM report files:'
      find . -iname 'gl-sbom-*.cdx.json'
      echo 'The above were the SBOM report files.'
      ####

      ASSETS=""
      BINARIES="./bin/*"
      for BINARY in $BINARIES
      do
        BINARY_NAME=$(basename $BINARY)
        ASSETS="$ASSETS --assets-link {\"name\":\"${BINARY_NAME}\",\"url\":\"${UNVERSIONED_PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/${BINARY_NAME}\"}"
      done

      release-cli create \
        --name "Release $CI_COMMIT_TAG" \
        --description "Tharsis CLI Release $CI_COMMIT_TAG" \
        --tag-name $CI_COMMIT_TAG \
        --ref $CI_COMMIT_TAG $ASSETS

#################################
##            SAST             ##
#################################

gemnasium-dependency_scanning:
  variables:
    DS_EXCLUDED_PATHS: "$GOPATH_RELATIVE_PATH"
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

semgrep-sast:
  before_script:
    - |
      echo "*_test.go" >> /semgrepignore
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

kics-iac-sast:
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

secret_detection:
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

license_scanning:
  stage: test
  image: golang:${GO_VERSION}-alpine
  allow_failure: true
  before_script:
    - export PATH=$PATH:$GOPATH/bin
    - apk add git bash openssh ca-certificates make jq
    - go install github.com/uw-labs/lichen@latest
  script:
    - make build
    - lichen -j lichen.json $CI_PROJECT_DIR/tharsis
    - >
      jq '{"version": "2.1","licenses": [ . | .Modules[] | .Licenses[] | {"id": .Name,"name": .Name, "url": ("https://opensource.org/licenses/" + .Name) } ] | unique,"dependencies":[ . | .Modules[] | {"name": .Path, "version": .Version, "package_manager": "go","path": "go.sum","licenses": [ .Licenses[] | .Name]}]}' lichen.json > gl-license-scanning-report.json
  cache:
    <<: *cache-template
  artifacts:
    reports:
      license_scanning: gl-license-scanning-report.json
    paths: [gl-license-scanning-report.json]
  dependencies: []
  rules:
    - !reference [.on_default_branch_and_merge_train_with_golang_changes, rules]
